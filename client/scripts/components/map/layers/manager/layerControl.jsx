'use strict';

var React = require('react');
var Reflux = require('reflux');
var EsriService=require('./esriService.jsx');
var ArcgisLayerStore = require('../../../../stores/arcgisLayerStore.js');
var ArcgisLayerActions = require('../../../../actions/arcgisLayersActions.js')

var Slider= require('react-slider')
var placeholder = document.createElement("li");
var _=require('lodash')

var CustomControl= L.Control.Layers.extend({
           //this will manage only map actions, html will be generated by the react component
           intialize:function(map){

            this._map = map;
            map
            .on('layeradd', this._onLayerChange, this)
            .on('layerremove', this._onLayerChange, this)
            .on('changeorder', this._onLayerChange, this);
            return this._container;
          },
          remove: function(map) {

            map
            .off('layeradd', this._onLayerChange)
            .off('layerremove', this._onLayerChange)
            .off('changeorder', this._onLayerChange);
          },

          addLayer:function(layer){

            this._handlingClick = true;
            if (!this._map.hasLayer(layer)) {
             console.log('........ add layer');
             this._map.addLayer(layer);
           }


           this._handlingClick = false;
           this._refocusOnMap();
         },

         removeLayer:function(layer){
           this._handlingClick = true;
           if (this._map.hasLayer(layer)) {
             console.log('........remove layer');
             this._map.removeLayer(layer);
           }

           this._handlingClick = false;
           this._refocusOnMap();
         }
       });


var Layer=React.createClass({

  _handleChange: function(event) {
    this.setState(_.assign(this.state,{checked: event.currentTarget.checked}));
  },
  _handleOpacityChanged:function(value){
    this.setState(_.assign(this.state,{opacity: (value/100)}));
  },

  componentDidUpdate:function(prevProps,prevState){
   console.log("Layer Control > Layer : componentDidUpdate  ..")
   var layer=this.props.layer;

   if (this.state.checked) {
    this.props.onAddLayer(layer);

  }else if (!this.state.checked){
    this.props.onRemoveLayer(layer);
  }
  if (prevProps.opacity!=this.state.opacity ){
    this.props.onChangeOpacity(this.props.id,this.state.opacity);
  }

  layer.setZIndex(this.props.zIndex);
  layer.setOpacity(this.props.opacity);


},

componentDidMount:function(){
 console.log("Layer Control > Layer : componentDidMount  ..")

 this.forceUpdate();
},

getInitialState:function(){
  return {checked:true,opacity:1};
},


_up:function(){
  this.props.onMoveUp(this.props.id);
},

_down:function(){
  this.props.onMoveDown(this.props.id);
},

render: function() {
  console.log("Layer Control > Layer : Rendering now ..")
  return (
    <li>
    <input type="checkbox" checked={this.state.checked} onChange={this._handleChange}/> {this.props.title}      <i className="fa fa-arrow-up" onClick={this._up}></i> <i onClick={this._down} className="fa fa-arrow-down"></i>
    <div>

    <Slider  defaultValue={[100]} withBars  className="horizontal-slider" onChange={this._handleOpacityChanged}/>

    </div>
    </li>
    );   
}
});

module.exports  = React.createClass({
  mixins: [Reflux.listenTo(ArcgisLayerStore,"_onStatusChange")],

  _onStatusChange: function(status) {
    var newState={layers:status.leafletLayers.slice(0)};
    //if(newState.layers.length != this.state.layers.length){
      this.setState(newState); //create a new array in order to isolate the state
    //}
  },
  
  getInitialState:function(){
    return {layers:ArcgisLayerStore.getInitialState().leafletLayers.slice(0)};
  },

  componentWillMount:function(){
   this.control=new CustomControl();
   this.control.intialize(this.props.getMap());
 },

 
 componentWillUnmount:function(){
  this.control.remove(this.props.getMap());
},

_handleAddLayer:function(layer){
  this.control.addLayer(layer);
},

_handleRemoveLayer:function(layer){
  this.control.removeLayer(layer);
},

_handleChangeOpacity:function(id,value){
  ArcgisLayerActions.changeLayerValue('opacity',id,value)
},

_handleMoveUp:function(id){
  ArcgisLayerActions.changeLayerValue('moveUp',id)
},

_handleMoveDown:function(id){
  ArcgisLayerActions.changeLayerValue('moveDown',id)
},



render: function() {
  debugger;
  var sortedLayer=_.sortBy(this.state.layers,'zIndex').reverse();
  return (
    <div className="layer-control">
    <h3>Contextual Layers</h3>
    <ul onDragOver={this.dragOver}>
    {sortedLayer.map(function(l){
     return ((l.type=='Layer')?
      <Layer 
      id={l.id}
      onMoveUp={this._handleMoveUp}
      onMoveDown={this._handleMoveDown}
      onAddLayer={this._handleAddLayer}
      onRemoveLayer={this._handleRemoveLayer}
      onChangeOpacity={this._handleChangeOpacity}
      getMap={this.props.getMap} 

      zIndex={l.zIndex} 
      layer={l.leafletLayer}
      opacity={l.opacity}
      title={l.title} />:<p>GROUP</p>)
   }.bind(this))}
    </ul>
    </div>
    );
}


});


